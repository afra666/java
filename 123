package p3;

import java.math.BigDecimal;
import java.util.Stack;

public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String s[]={"1","2","+"};
		System.out.println(new RPNtoResult().result(s));
	}
}
class RPNtoResult{
	BigDecimal result(String []inputAr){
		Stack<String> inputStk=new Stack<String>();//RPN最右端入栈低
		for (int i = inputAr.length-1; i>=0 ; i--) {
			inputStk.push(inputAr[i]);
		}
		int inputStkSize=inputStk.size();
		Stack<String> tempStk=new Stack<String>();
		for (int i = 0; i < inputStkSize; i++) {
			switch (inputStk.peek()) {
			case "+":tempStk.pop();tempStk.push((new BigDecimal(inputStk.pop())).add(new BigDecimal(inputStk.pop())).toString());break;
			case "-":tempStk.pop();tempStk.push((new BigDecimal(inputStk.pop())).subtract(new BigDecimal(inputStk.pop())).toString());break;
			case "*":tempStk.pop();tempStk.push((new BigDecimal(inputStk.pop())).multiply(new BigDecimal(inputStk.pop())).toString());break;
			case "/":tempStk.pop();tempStk.push((new BigDecimal(inputStk.pop())).divide(new BigDecimal(inputStk.pop())).toString());break;
			

			default:tempStk.push(inputStk.pop());break;
			}
		}
		return new BigDecimal(tempStk.pop());
		
	}
}
